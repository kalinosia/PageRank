import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    # print("corpus: ", corpus)  # @@@
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    #suma = 0
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    #    suma += ranks[page]

    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    #suma2 = 0
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    #    suma2 += ranks[page]
    #print("suma: ", suma, " suma2: ", suma2)


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()
    # print("os.listdir(directory): ", os.listdir(directory))#@@@
    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )
    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """

    # create dict to return (empty)
    returning = dict()

    # If page has no outgoing links,
    # then transition_model should return a probability distribution
    # that chooses randomly among all pages with equal probability. (
    # In other words, if a page has no links, we can pretend it has links to all pages in the corpus, including itself.)
    if len(corpus[page]) == 0:
        for key in corpus:
            returning[key] = 1 / len(corpus)
        return returning

    # With probability damping_factor,
    # the random surfer should randomly choose one of the links from page with equal probability.
    for link in corpus[page]:
        returning[link] = damping_factor / len(corpus[page])

    # With probability 1 - damping_factor,
    # the random surfer should randomly choose one of all pages in the corpus with equal probability.
    for key in corpus:
        if key not in returning:
            returning[key] = (1 - damping_factor) / len(corpus)
        else:
            returning[key] += (1 - damping_factor) / len(corpus)

    # print("page, returning: ", page," ",returning)
    return returning
    # raise NotImplementedError


def returning_max_page(pages):
    # pages=transition_model(corpus, page, damping_factor)
    # so it's dictionary with prob
    # for example:
    # {'2.html': 0.8875, '1.html': 0.037500000000000006, '3.html': 0.037500000000000006, '4.html': 0.037500000000000006}
    # {'3.html': 0.4625, '1.html': 0.4625, '2.html': 0.037500000000000006, '4.html': 0.037500000000000006}

    max_value = 0  # max value
    for page in pages:
        if pages[page] >= max_value:
            max_value = pages[page]

    max_value_pages = []  # if more than one, must prepare
    for page in pages:
        if pages[page] == max_value:
            max_value_pages.append(page)

    if len(max_value_pages) == 1:  # if only one page have max value
        return max_value_pages[0]
    else:
        returning_page=random.choice(max_value_pages)  # random choice
        # print("\n more maxes values \n pages: ", max_value_pages," \n returning page: ", returning_page)
        return returning_page  # random choice


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    # array with key to random choosing
    pages_to_random = []
    for key in corpus:
        pages_to_random.append(key)
    page = random.choice(pages_to_random)  # The first sample should be generated by choosing from a page at random.

    # dictionary with key=page, value=sum_of_choosing
    sum_pages = dict()
    for key in corpus:
        sum_pages[key] = 0
    sum_pages[page] += 1

    # start doing estimated pr
    turn = 1
    while turn < n:
        prob = transition_model(corpus, page, damping_factor)
        # page = (max(prob, key=prob.get))
        page = returning_max_page(prob)
        sum_pages[page] += 1
        turn += 1

    # now U must divide sum by sampling (124/1000=0,124=12,4%)
    pagerank = dict()
    for key in sum_pages:
        value = sum_pages[key] / n
        pagerank[key] = value
    #'''
    while True:
        values = []
        suma = 0
        for i in pagerank:
            suma += pagerank[i]
            values.append(pagerank[i])
        j = 0
        if suma != 1:
            for i in pagerank:
                pagerank[i] = values[j] / suma
                j += 1
        suma = 0
        for i in pagerank:
            # PageRank[i] = round(PageRank[i], 4)
            suma += pagerank[i]
        #print("NORMALIZE FIRST RESULT FROM SAMPLN @@@@@@@@@@@@")
        if suma == 1:
            break
    #'''
    return pagerank

    # raise NotImplementedError


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # The function should begin by assigning each page a rank of 1 / N,
    N = len(corpus)  # where N is the total number of pages in the corpus.
    PageRank = dict()
    before_values = dict()  # to check if |before_value-PageRank_new_value|<=0.001
    # The function should begin by assigning each page a rank of 1 / N
    for key in corpus:
        PageRank[key] = 1 / N
        before_values[key] = 0
    # print(PageRank)

    while True:
        # PR(p)=(1-d)/N + d* sum(PR(i)/NumLinks(i)
        # i ranges over all pages that link to page p
        for key in PageRank:  # looking for pages which links
            PRi_NumLinks = []  # PR(i)/NumLinks(i)
            for page in corpus:
                if key in corpus[page]:
                    PRi_NumLinks.append(PageRank[page] / len(corpus[page]))  # DOKłADNOŚ????????
                elif len(corpus[page]) == 0:
                    PRi_NumLinks.append(PageRank[page] / len(corpus))
            value = ((1 - damping_factor) / N) + damping_factor * (sum(PRi_NumLinks))

            before_values[key] = PageRank[key]
            PageRank[key] = value
        how_many = 0
        for key in PageRank:
            if abs(PageRank[key] - before_values[key]) <= 0.001:
                # print("stop", key)
                how_many += 1
        if how_many == len(corpus):
            break
    # print(PageRank)

    # normalize PageRank[i] = round(PageRank[i], 4)  #???????????
    while True:
        values = []
        suma = 0
        for i in PageRank:
            suma += PageRank[i]
            values.append(PageRank[i])
        j = 0
        if suma != 1:
            for i in PageRank:
                PageRank[i] = values[j] / suma
                j += 1
        suma = 0
        for i in PageRank:
            # PageRank[i] = round(PageRank[i], 4)
            suma += PageRank[i]
        if suma == 1:
            break
    return PageRank
    # raise NotImplementedError


if __name__ == "__main__":
    main()
